//
// Generated file, do not edit! Created by opp_msgtool 6.1 from Messages.msg.
//

#ifndef __MESSAGES_M_H
#define __MESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class DataPacket;
class CQIReport;
class SchedulingGrant;
class TTIEvent;
/**
 * Class generated from <tt>Messages.msg:17</tt> by opp_msgtool.
 * <pre>
 * // Packet with creation timestamp for response time calculation
 * packet DataPacket
 * {
 *     int userId;
 *     int sequenceNumber;
 *     simtime_t creationTime;
 * }
 * </pre>
 */
class DataPacket : public ::omnetpp::cPacket
{
  protected:
    int userId = 0;
    int sequenceNumber = 0;
    omnetpp::simtime_t creationTime = SIMTIME_ZERO;

  private:
    void copy(const DataPacket& other);

  protected:
    bool operator==(const DataPacket&) = delete;

  public:
    DataPacket(const char *name=nullptr, short kind=0);
    DataPacket(const DataPacket& other);
    virtual ~DataPacket();
    DataPacket& operator=(const DataPacket& other);
    virtual DataPacket *dup() const override {return new DataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getUserId() const;
    virtual void setUserId(int userId);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual omnetpp::simtime_t getCreationTime() const;
    virtual void setCreationTime(omnetpp::simtime_t creationTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:24</tt> by opp_msgtool.
 * <pre>
 * // CQI report message from UE to base station
 * message CQIReport
 * {
 *     int userId;
 *     int cqiValue;  // 1-15
 * }
 * </pre>
 */
class CQIReport : public ::omnetpp::cMessage
{
  protected:
    int userId = 0;
    int cqiValue = 0;

  private:
    void copy(const CQIReport& other);

  protected:
    bool operator==(const CQIReport&) = delete;

  public:
    CQIReport(const char *name=nullptr, short kind=0);
    CQIReport(const CQIReport& other);
    virtual ~CQIReport();
    CQIReport& operator=(const CQIReport& other);
    virtual CQIReport *dup() const override {return new CQIReport(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getUserId() const;
    virtual void setUserId(int userId);

    virtual int getCqiValue() const;
    virtual void setCqiValue(int cqiValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CQIReport& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CQIReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:30</tt> by opp_msgtool.
 * <pre>
 * // Scheduling grant message from base station to UE
 * message SchedulingGrant
 * {
 *     int userId;
 *     int allocatedBytes;
 *     int allocatedRBs;
 * }
 * </pre>
 */
class SchedulingGrant : public ::omnetpp::cMessage
{
  protected:
    int userId = 0;
    int allocatedBytes = 0;
    int allocatedRBs = 0;

  private:
    void copy(const SchedulingGrant& other);

  protected:
    bool operator==(const SchedulingGrant&) = delete;

  public:
    SchedulingGrant(const char *name=nullptr, short kind=0);
    SchedulingGrant(const SchedulingGrant& other);
    virtual ~SchedulingGrant();
    SchedulingGrant& operator=(const SchedulingGrant& other);
    virtual SchedulingGrant *dup() const override {return new SchedulingGrant(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getUserId() const;
    virtual void setUserId(int userId);

    virtual int getAllocatedBytes() const;
    virtual void setAllocatedBytes(int allocatedBytes);

    virtual int getAllocatedRBs() const;
    virtual void setAllocatedRBs(int allocatedRBs);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SchedulingGrant& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SchedulingGrant& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:37</tt> by opp_msgtool.
 * <pre>
 * // Control message for TTI timing
 * message TTIEvent
 * {
 *     int ttiNumber;
 * }
 * </pre>
 */
class TTIEvent : public ::omnetpp::cMessage
{
  protected:
    int ttiNumber = 0;

  private:
    void copy(const TTIEvent& other);

  protected:
    bool operator==(const TTIEvent&) = delete;

  public:
    TTIEvent(const char *name=nullptr, short kind=0);
    TTIEvent(const TTIEvent& other);
    virtual ~TTIEvent();
    TTIEvent& operator=(const TTIEvent& other);
    virtual TTIEvent *dup() const override {return new TTIEvent(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTtiNumber() const;
    virtual void setTtiNumber(int ttiNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TTIEvent& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TTIEvent& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline DataPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<DataPacket*>(ptr.get<cObject>()); }
template<> inline CQIReport *fromAnyPtr(any_ptr ptr) { return check_and_cast<CQIReport*>(ptr.get<cObject>()); }
template<> inline SchedulingGrant *fromAnyPtr(any_ptr ptr) { return check_and_cast<SchedulingGrant*>(ptr.get<cObject>()); }
template<> inline TTIEvent *fromAnyPtr(any_ptr ptr) { return check_and_cast<TTIEvent*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGES_M_H

